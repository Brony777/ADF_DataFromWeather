{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "AdfWeathertb"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/Load From Raw to table AllStations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "For each file load new stations",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "List files stations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('List files stations').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "AllStations",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set variable cointainerName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set variable fileName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set variable FolderName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"id"
												]
											},
											"sqlWriterUseTableLock": true
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['id']"
													},
													"sink": {
														"name": "id",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['stationName']"
													},
													"sink": {
														"name": "stationName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['gegrLat']"
													},
													"sink": {
														"name": "gegrLat",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['gegrLon']"
													},
													"sink": {
														"name": "gegrLon",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['city']['id']"
													},
													"sink": {
														"name": "Cityid",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['city']['name']"
													},
													"sink": {
														"name": "Cityname",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['city']['commune']['communeName']"
													},
													"sink": {
														"name": "communeName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['city']['commune']['districtName']"
													},
													"sink": {
														"name": "districtName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['city']['commune']['provinceName']"
													},
													"sink": {
														"name": "provinceName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['addressStreet']"
													},
													"sink": {
														"name": "addressStreet",
														"type": "String"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "AllStationFiles",
											"type": "DatasetReference",
											"parameters": {
												"Container": {
													"value": "@variables('ContainerName')",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@variables('FolderName')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('FileName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AllStations",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set variable cointainerName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ContainerName",
										"value": {
											"value": "@string(item().ContainerName)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable FolderName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FolderName",
										"value": {
											"value": "@string(item().FolderName)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set variable fileName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@string(item().FileName)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Update as loaded file",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "AllStations",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SandboxAzure",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": {
													"value": "update\ntarget\nset\n\tDataLoaded = 1\nfrom\n\tdbo.DataLake_FilesMetadata as target\nwhere\n\tContainerName = '@{variables('ContainerName')}'\n\tand FolderName = '@{variables('FolderName')}'\n\tand FileName = '@{variables('FileName')}'",
													"type": "Expression"
												}
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					},
					{
						"name": "List files stations",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\n\tContainerName\n\t,FolderName\n\t,FileName\nfrom\n\tdbo.DataLake_FilesMetadata\nwhere\n\tFileName like '%Stations%.json%'\n\tand ISNULL(DataLoaded,0) = 0\norder by\n\tid asc",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AllStations",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"ListOfFiles": {
						"type": "Array"
					},
					"FileName": {
						"type": "String"
					},
					"FolderName": {
						"type": "String"
					},
					"ContainerName": {
						"type": "String"
					}
				},
				"folder": {
					"name": "2_FromBlogToStg"
				},
				"annotations": [],
				"lastPublishTime": "2022-11-22T11:50:44Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Load from raw to table Sensors')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup for all sensors files",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select\n\tContainerName\n\t,FolderName\n\t,FileName\nfrom\n\tdbo.DataLake_FilesMetadata\nwhere\n\tFileName like 'Station[_]%'\n\tand ISNULL(DataLoaded,0) = 0\norder by\n\tid asc",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AllFlatFiles",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "For each sensor file",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup for all sensors files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup for all sensors files').output.value",
								"type": "Expression"
							},
							"isSequential": false,
							"activities": [
								{
									"name": "Copy data from Sensor file to table",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Set ContainerName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set FolderName",
											"dependencyConditions": [
												"Succeeded"
											]
										},
										{
											"activity": "Set FileName",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "JsonSource",
											"storeSettings": {
												"type": "AzureBlobFSReadSettings",
												"recursive": true,
												"enablePartitionDiscovery": false
											},
											"formatSettings": {
												"type": "JsonReadSettings"
											}
										},
										"sink": {
											"type": "SqlServerSink",
											"writeBehavior": "upsert",
											"upsertSettings": {
												"useTempDB": true,
												"keys": [
													"SensorId"
												]
											},
											"sqlWriterUseTableLock": false
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['id']"
													},
													"sink": {
														"name": "SensorId",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['stationId']"
													},
													"sink": {
														"name": "StationId",
														"type": "Int32"
													}
												},
												{
													"source": {
														"path": "$['param']['paramName']"
													},
													"sink": {
														"name": "paramName",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['param']['paramFormula']"
													},
													"sink": {
														"name": "paramFormula",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['param']['paramCode']"
													},
													"sink": {
														"name": "paramCode",
														"type": "String"
													}
												},
												{
													"source": {
														"path": "$['param']['idParam']"
													},
													"sink": {
														"name": "idParam",
														"type": "Int32"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "Sensor_Json",
											"type": "DatasetReference",
											"parameters": {
												"ContainerName": {
													"value": "@variables('ContainerName')",
													"type": "Expression"
												},
												"FolderName": {
													"value": "@variables('FolderName')",
													"type": "Expression"
												},
												"FileName": {
													"value": "@variables('FileName')",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "Sensors",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								},
								{
									"name": "Set ContainerName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "ContainerName",
										"value": {
											"value": "@string(item().ContainerName)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set FolderName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FolderName",
										"value": {
											"value": "@string(item().FolderName)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Set FileName",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "FileName",
										"value": {
											"value": "@string(item().FileName)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "Update FileLoad status",
									"type": "Script",
									"dependsOn": [
										{
											"activity": "Copy data from Sensor file to table",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"linkedServiceName": {
										"referenceName": "SandboxAzure",
										"type": "LinkedServiceReference"
									},
									"typeProperties": {
										"scripts": [
											{
												"type": "Query",
												"text": "update\ntarget\nset\n\tDataLoaded = 1\nfrom\n\tdbo.DataLake_FilesMetadata as target\nwhere\n\tContainerName = '@{variables('ContainerName')}'\n\tand FolderName = '@{variables('FolderName')}'\n\tand FileName = '@{variables('FileName')}'"
											}
										],
										"scriptBlockExecutionTimeout": "02:00:00"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"ContainerName": {
						"type": "String"
					},
					"FolderName": {
						"type": "String"
					},
					"FileName": {
						"type": "String"
					},
					"ListOfFiles": {
						"type": "Array"
					}
				},
				"folder": {
					"name": "2_FromBlogToStg"
				},
				"annotations": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SensorsFromAllStations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "GetAvailableSensors",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "SqlServerSource",
								"sqlReaderQuery": "select distinct\n\talst.id\nfrom\n\tdbo.AllStations as alst",
								"queryTimeout": "02:00:00",
								"isolationLevel": "ReadCommitted",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "AllStations",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEveryStationGetSensors",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "GetAvailableSensors",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('GetAvailableSensors').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "SetStationId",
									"type": "SetVariable",
									"dependsOn": [],
									"userProperties": [],
									"typeProperties": {
										"variableName": "StationId",
										"value": {
											"value": "@string(item().id)",
											"type": "Expression"
										}
									}
								},
								{
									"name": "CreateJsonFileFromRestSensors",
									"type": "Copy",
									"dependsOn": [
										{
											"activity": "Stored procedure1",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "RestSource",
											"httpRequestTimeout": "00:01:40",
											"requestInterval": "00.00:00:00.010",
											"requestMethod": "GET"
										},
										"sink": {
											"type": "JsonSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "JsonWriteSettings"
											}
										},
										"enableStaging": false,
										"parallelCopies": 1,
										"translator": {
											"type": "TabularTranslator",
											"mappings": [
												{
													"source": {
														"path": "$['id']"
													},
													"sink": {
														"path": "$['id']"
													}
												},
												{
													"source": {
														"path": "$['stationId']"
													},
													"sink": {
														"path": "$['stationId']"
													}
												},
												{
													"source": {
														"path": "$['param']['paramName']"
													},
													"sink": {
														"path": "$['param']['paramName']"
													}
												},
												{
													"source": {
														"path": "$['param']['paramFormula']"
													},
													"sink": {
														"path": "$['param']['paramFormula']"
													}
												},
												{
													"source": {
														"path": "$['param']['paramCode']"
													},
													"sink": {
														"path": "$['param']['paramCode']"
													}
												},
												{
													"source": {
														"path": "$['param']['idParam']"
													},
													"sink": {
														"path": "$['param']['idParam']"
													}
												}
											]
										}
									},
									"inputs": [
										{
											"referenceName": "GIOS_RestApi",
											"type": "DatasetReference",
											"parameters": {
												"RestApiRelative": {
													"value": "@Concat('station/sensors/',variables('StationId'))",
													"type": "Expression"
												}
											}
										}
									],
									"outputs": [
										{
											"referenceName": "AllSensors",
											"type": "DatasetReference",
											"parameters": {
												"StationId": {
													"value": "@variables('StationId')",
													"type": "Expression"
												}
											}
										}
									]
								},
								{
									"name": "Stored procedure1",
									"type": "SqlServerStoredProcedure",
									"dependsOn": [
										{
											"activity": "SetStationId",
											"dependencyConditions": [
												"Succeeded"
											]
										}
									],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"storedProcedureName": "[[dbo].[MetadataStationWork]",
										"storedProcedureParameters": {
											"ID": {
												"value": {
													"value": "@variables('StationId')",
													"type": "Expression"
												},
												"type": "Int32"
											}
										}
									},
									"linkedServiceName": {
										"referenceName": "SandboxAzure",
										"type": "LinkedServiceReference"
									}
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"variables": {
					"StationId": {
						"type": "String",
						"defaultValue": "14"
					}
				},
				"folder": {
					"name": "1_FromRestApi"
				},
				"annotations": [],
				"lastPublishTime": "2022-12-04T12:40:29Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Ingest All stations')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "AllStations ingest",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "RestSource",
								"httpRequestTimeout": "00:01:40",
								"requestInterval": "00.00:00:00.010",
								"requestMethod": "GET"
							},
							"sink": {
								"type": "JsonSink",
								"storeSettings": {
									"type": "AzureBlobFSWriteSettings"
								},
								"formatSettings": {
									"type": "JsonWriteSettings"
								}
							},
							"enableStaging": false
						},
						"inputs": [
							{
								"referenceName": "GIOS_RestApi",
								"type": "DatasetReference",
								"parameters": {
									"RestApiRelative": "station/findAll"
								}
							}
						],
						"outputs": [
							{
								"referenceName": "AllStations_JSON",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Load From Raw to table AllStations",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "AllStations ingest",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "Load From Raw to table AllStations",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Load Sensors into flat files",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load From Raw to table AllStations",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "SensorsFromAllStations",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					},
					{
						"name": "Save Metadata Run ALLFlatFiles",
						"type": "ExecutePipeline",
						"dependsOn": [
							{
								"activity": "Load Sensors into flat files",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"pipeline": {
								"referenceName": "AllFlatFiles",
								"type": "PipelineReference"
							},
							"waitOnCompletion": true,
							"parameters": {}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"folder": {
					"name": "1_FromRestApi"
				},
				"annotations": [],
				"lastPublishTime": "2022-09-16T10:46:49Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Load From Raw to table AllStations')]",
				"[concat(variables('factoryId'), '/pipelines/SensorsFromAllStations')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/OnceDailyInNight')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "Ingest All stations",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Day",
						"interval": 1,
						"startTime": "2022-09-15T00:55:00Z",
						"timeZone": "UTC"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/pipelines/Ingest All stations')]"
			]
		}
	]
}